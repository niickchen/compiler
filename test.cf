int glb_int;
bool glb_bool;

int test_fancy_function(int x, bool y){
	x--;
	y = !y;
	cout << "\nfancy function(";
	cout << x;
	cout << ", ";
	cout << y;
	cout << ")";

	if(x > 0){
		test_fancy_function(x, y);
	}
	return x;
}

int test_function2(){
	cout << "\ntest function 2";
	return 0;
}

int test_function1(){
	cout << "\ntest function 1";
	test_function2();
	return 10;
}

int test_para_function(int x, int y, bool z, bool a, int b, int c){
	cout << "\ntest_para_function called";
	cout << "int x: ";
	cout << x;
	cout << "int y: ";
	cout << y;
	cout << "bool z: ";
	cout << z;
	cout << "bool a: ";
	cout << a;
	cout << "int b: ";
	cout << b;
	cout << "int c: ";
	cout << c;
	
	return 0;
}

void void_function(){
	cout << "\nvoid function called";
}

bool bool_function(bool x){
	return x;
}

void main(){
	int local_int1;
	int local_int2;
	int local_int3;

	bool local_bool1;
	bool local_bool2;
	bool local_bool3;

	cout << "\n***main starts***";

	cout << "\n\n***init value***";
	cout << "\n0 glb_int:(0) ";
	cout << glb_int;

	cout << "\nlocal_int1: ";
	cout << local_int1;
	cout << "\nlocal_int2: ";
	cout << local_int2;
	cout << "\nlocal_int3: ";
	cout << local_int3;
	
	cout << "\nlocal_bool1: ";
	cout << local_bool1;
	cout << "\nlocal_bool2: ";
	cout << local_bool2;
	cout << "\nlocal_bool3: ";
	cout << local_bool3;
	


	cout << "\n\n***test recursvie calls***";
	glb_int = test_function1();
	cout << "\ntest_function1 return:(10) ";
	cout << glb_int;

	cout << "\n\n***test assignments***\n***before assginments***";

	cout << "\nlocal_int1: ";
	cout << local_int1;
	cout << "\nlocal_int2: ";
	cout << local_int2;
	cout << "\nlocal_int3: ";
	cout << local_int3;
	
	cout << "\nlocal_bool1: ";
	cout << local_bool1;
	cout << "\nlocal_bool2: ";
	cout << local_bool2;
	cout << "\nlocal_bool3: ";
	cout << local_bool3;

	glb_int = 0; //clear
	cout << "\n2 glb_int:(0) ";
	cout << glb_int;

	local_int1 = 1;
	local_int2 = 2;
	local_int3 = 3;

	local_bool1 = true;
	local_bool2 = false;
	local_bool3 = true;

	glb_int = 2;
	
	cout << "\n\n***after assginments***";	
	cout << "\nlocal_int1: ";
	cout << local_int1;
	cout << "\nlocal_int2: ";
	cout << local_int2;
	cout << "\nlocal_int3: ";
	cout << local_int3;
	
	cout << "\nlocal_bool1: ";
	cout << local_bool1;
	cout << "\nlocal_bool2: ";
	cout << local_bool2;
	cout << "\nlocal_bool3: ";
	cout << local_bool3;

	cout << "\n2 glb_int:(2) ";
	cout << glb_int;


	cout << "\n\n***test expressions***";
	cout << "\nlocal_int1: ";
	cout << local_int1;
	cout << "\nlocal_int2: ";
	cout << local_int2;
	cout << "\nlocal_int3: ";
	cout << local_int3;
	
	cout << "\nlocal_bool1: ";
	cout << local_bool1;
	cout << "\nlocal_bool2: ";
	cout << local_bool2;
	cout << "\nlocal_bool3: ";
	cout << local_bool3;

	cout << "\n\n***test binary operations***";
	glb_int =0;
	glb_bool = false;

	local_int1 = 1;
	local_int2 = 2;
	local_int3 = 3;

	local_bool1 = true;
	local_bool2 = false;
	local_bool3 = true;

	cout << "\nlocal_int1 + local_int2:(3)  ";
	cout << local_int1 + local_int2;

	cout << "\nlocal_int1 - local_int2:(-1)  ";
	cout << local_int1 - local_int2;

	cout << "\nlocal_int1 * local_int2:(2)  ";
	cout << local_int1 * local_int2;

	cout << "\nlocal_int1 / local_int2:(0)  ";
	cout << local_int1 / local_int2;

	cout << "\nlocal_int1++:(1) ";
	local_int1 = 0;
	local_int1 ++;
	cout << local_int1;

	cout << "\nlocal_int1--:(0) ";
	local_int1 --;
	cout << local_int1;

	cout << "\nlocal_int1+ -local_int1:(0) ";
	cout << local_int1+ -local_int1;

	cout << "\n!local_bool1:(1) ";
	local_bool1 = false;
	cout << local_bool1 = !local_bool1;

	cout << "\n!local_bool1:(0) ";
	cout << !local_bool1;

	cout << "\n\n***test relation operations***";
	glb_int =0;
	glb_bool = false;

	local_int1 = 1;
	local_int2 = 2;
	local_int3 = 3;

	local_bool1 = true;
	local_bool2 = false;
	local_bool3 = true;
	cout << "\nlocal_bool1 && local_bool2:(0) ";
	cout << local_bool1 && local_bool2;
	
	cout << "\nlocal_bool1 || local_bool2:(1) ";
	cout << local_bool1 || local_bool2;
	
	cout << "\nlocal_bool1 == local_bool2:(0) ";
	cout << local_bool1 == local_bool2;

	cout << "\nlocal_bool1 != local_bool2:(1) ";
	cout << local_bool1 != local_bool2;

	cout << "\nlocal_int1 < local_int2:(1)  ";
	cout << local_int1 < local_int2;

	cout << "\nlocal_int1 <= local_int2:(1)  ";
	cout << local_int1 <= local_int2;

	cout << "\nlocal_int1 > local_int2:(0)  ";
	cout << local_int1 > local_int2;

	cout << "\nlocal_int1 >= local_int2:(0)  ";
	cout << local_int1 >= local_int2;


	cout << "\n\n***test control flow***";
	cout << "\n***test if stmt***";
	local_bool1 = false;
	if(true){
		cout << "\n---if stmt goes here---";
		local_bool1 = true;
	}
	cout << "\nlocal_bool1:(1) ";
	cout << local_bool1;

	cout << "\n\n***test if-else stmt(true path)***";
	local_int1 = 0;
	if(true){
		cout << "\n---if-else stmt, correct path---";
		local_int1 = 1;
	}
	else {
		cout << "\n---if-else stmt, wrong path---";
		local_int1 = 2;
	}
	cout << "\nlocal_int1:(1) ";
	cout << local_int1;

	cout << "\n\n***test if-else stmt(false path)***";
	local_int1 = 0;
	if(false){
		cout << "\n---if-else stmt, wrong path---";
		local_int1 = 1;
	}
	else {
		cout << "\n----if-else stmt, correct path---";
		local_int1 = 2;
	}
	cout << "\nlocal_int1:(2) ";
	cout << local_int1;

	cout << "\n\n***test while stmt (5 iterations)***";
	local_int1 = 5;
	while( local_int1 != 0 ){
		cout << "\nlocal_int1: ";
		cout << local_int1;
		local_int1 = local_int1 - 1;
	}
	cout << "\nlocal_int1:(0) ";
	cout << local_int1;
	//*********************************	
	cout << "\n\nLet us test something fucking complex :)****";

	cout << "\n***test complex operations***";
	cout << "\n***reset varibales***";
	glb_int = 0;
	glb_bool = false;

	local_int1 = 1;
	local_int2 = 2;
	local_int3 = 3;

	local_bool1 = true;
	local_bool2 = false;
	local_bool3 = true;
	
	cout << "\nglb_int = local_int1 + local_int2 * local_int3 - local_int1 /local_int1:(6) "; // 1+2*3-1/1 = 6
	cout << glb_int = local_int1 + local_int2 * local_int3 - local_int1 /local_int1;

	cout << "\nglb_bool = local_bool1 || local_bool2 && local_bool3 && (local_int1 < local_int2): (1) "; //1 || 0 && 1 && (1 <2) = 1
	cout << glb_bool = local_bool1 || local_bool2 && local_bool3 && (local_int1 < local_int2);

	cout << "\n1+2+3+4+5+6+7+8+9+10:(55) ";
	cout << 1+2+3+4+5+6+7+8+9+10;
	
	cout << "\nlocal_int1*1/1*2/2*3/3*4/4*5/5:(1) ";
	cout << local_int1*1/1*2/2*3/3*4/4*5/5;

	cout << "\n\n***test chained assignments***";
	glb_int = local_int1 = local_int2 =local_int3 = 9;
	cout << "\nglb_int:(9) ";
	cout << glb_int;
	cout << "\nlocal_int1:(9) ";
	cout << local_int1;
	cout << "\nlocal_int2:(9) ";
	cout << local_int2;
	cout << "\nlocal_int3:(9) ";
	cout << local_int3;
	

	cout << "\n\n***fancy recursive function calls***";
	test_fancy_function(10, true);	


	cout << "\n\n***test recursive if else***";
	glb_int =0;
	glb_bool = false;

	local_int1 = 1;
	local_int2 = 2;
	local_int3 = 3;

	local_bool1 = true;
	local_bool2 = false;
	local_bool3 = true;

	if( local_int1 < local_int2 || local_int2 > local_int3 ){ 
		//1||0= 1
		cout << "\n---correct path---";
		local_int1++;

		if( local_bool1 && local_bool2 && local_bool2 || !local_bool3){
			//1&&2&&2||0= false
			cout << "\n---wrong path---";
			return ;
		}
		else {
			local_int1++;
			local_int2 = 5;
			local_int3 = 2;
			cout << "\n---correct path---";

			while( (local_int2= local_int2 - 1) != 0){
				while( (local_int3= local_int3 + 1)<5){
					cout << "\n inner while: ";
					cout << local_int3;
				}
				cout << "\n outer while: ";
				cout << local_int2;
			}
		}
	}
	else{
		cout << "\n---wrong path---";
		return ;
	}

	cout << "\n\n***test multi-parameters functions***\n";
	local_int1 = 1;
	local_int2 = 2;
	local_int3 = 3;	
	local_bool1 = false;
	local_bool2 = true;
	glb_int = 0;
	test_para_function(local_int1, local_int2, local_bool1, local_bool2, local_int3, glb_int);

	cout << "\n***test void return funtion call***";
	void_function();
	cout << "\n***test bool return funtion call***\n";
	cout << bool_function(true);
	cout << "\n";
	cout << bool_function(false);

	//*********************************
	cout << "\n\n***test read int stmt***";
	cin  >> glb_int;
	cout << "\n1 glb_int: ";
	cout << glb_int;

	cout << "\n\n***test read bool stmt***";
	cin  >> glb_bool;
	cout << "\nglb_bool: ";
	cout << glb_bool;

	cout << "\n";
	return;
}

